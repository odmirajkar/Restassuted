{
  "file_name": "PostgresIntegrationTests.java",
  "file_path": "org/springframework/samples/petclinic/PostgresIntegrationTests.java",
  "file_summary": "This Java file `PostgresIntegrationTests` is an integration test suite for the Spring PetClinic application. It is designed to verify the application's functionality when configured to use a PostgreSQL database, specifically integrating with Docker Compose. The test class leverages Spring Boot's `@SpringBootTest` annotation, running the application on a random port and enabling Docker Compose integration to manage the PostgreSQL service. It ensures that Docker is available before tests run and activates the `postgres` Spring profile.\n\nThe class includes a `main` method to demonstrate how the application can be launched independently with the `postgres` profile and Docker Compose. Test methods `testFindAll()` and `testOwnerDetails()` validate core functionalities: retrieving vet information (with caching implications) and fetching owner details via an HTTP endpoint. A nested static class `PropertiesLogger` is an `ApplicationListener` that logs all environment properties during application startup. This logger helps in debugging by providing a detailed overview of the configuration, including any overridden properties, which is particularly useful in complex testing environments involving external services like Docker Compose.",
  "attributes": [
    {
      "name": "port",
      "type": "int",
      "membership": "instance, @LocalServerPort"
    },
    {
      "name": "vets",
      "type": "org.springframework.samples.petclinic.vet.VetRepository",
      "membership": "private, @Autowired"
    },
    {
      "name": "builder",
      "type": "org.springframework.boot.web.client.RestTemplateBuilder",
      "membership": "private, @Autowired"
    },
    {
      "name": "PropertiesLogger.log",
      "type": "org.apache.commons.logging.Log",
      "membership": "private static final"
    },
    {
      "name": "PropertiesLogger.environment",
      "type": "org.springframework.core.env.ConfigurableEnvironment",
      "membership": "private"
    },
    {
      "name": "PropertiesLogger.isFirstRun",
      "type": "boolean",
      "membership": "private"
    }
  ],
  "functions": [
    {
      "name": "available",
      "signature": "static void available()",
      "annotations": ["@BeforeAll"]
    },
    {
      "name": "main",
      "signature": "static void main(String[] args)"
    },
    {
      "name": "testFindAll",
      "signature": "void testFindAll() throws Exception",
      "annotations": ["@Test"]
    },
    {
      "name": "testOwnerDetails",
      "signature": "void testOwnerDetails()",
      "annotations": ["@Test"]
    },
    {
      "name": "PropertiesLogger.onApplicationEvent",
      "signature": "void onApplicationEvent(ApplicationPreparedEvent event)",
      "annotations": ["@Override"]
    },
    {
      "name": "PropertiesLogger.printProperties",
      "signature": "void printProperties()"
    },
    {
      "name": "PropertiesLogger.findPropertiesPropertySources",
      "signature": "private List<EnumerablePropertySource<?>> findPropertiesPropertySources()"
    }
  ]
}