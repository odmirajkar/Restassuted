{
  "file_name": "PetTypeFormatterTests.java",
  "file_path": "src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
  "file_summary": "This Java file, `PetTypeFormatterTests`, is a JUnit 5 test class designed to validate the functionality of the `PetTypeFormatter` in the Spring PetClinic application. Located within the `org.springframework.samples.petclinic.owner` package, it ensures the formatter correctly converts between `PetType` objects and their string representations. The class utilizes Mockito to mock the `PetTypeRepository` dependency, providing controlled data for testing purposes. It includes setup methods to initialize the formatter before each test.\n\nKey tests cover both printing (`testPrint`) and parsing (`shouldParse`, `shouldThrowParseException`) operations. `testPrint` verifies that a `PetType` object is correctly converted into its name string. `shouldParse` confirms that a pet type name string can be successfully parsed back into a `PetType` object, leveraging mocked repository data. Crucially, `shouldThrowParseException` asserts that a `ParseException` is thrown when an invalid or unknown pet type name is provided during parsing, ensuring robust error handling. A private helper method, `makePetTypes`, generates sample `PetType` data for consistent testing. The class is also marked with `@DisabledInNativeImage`.",
  "attributes": [
    {
      "name": "types",
      "type": "PetTypeRepository",
      "membership_type": "private",
      "annotations": ["@Mock"]
    },
    {
      "name": "petTypeFormatter",
      "type": "PetTypeFormatter",
      "membership_type": "private"
    }
  ],
  "functions": [
    {
      "name": "setup",
      "return_type": "void",
      "parameters": [],
      "annotations": ["@BeforeEach"]
    },
    {
      "name": "testPrint",
      "return_type": "void",
      "parameters": [],
      "annotations": ["@Test"]
    },
    {
      "name": "shouldParse",
      "return_type": "void",
      "parameters": [],
      "annotations": ["@Test"],
      "throws": ["ParseException"]
    },
    {
      "name": "shouldThrowParseException",
      "return_type": "void",
      "parameters": [],
      "annotations": ["@Test"]
    },
    {
      "name": "makePetTypes",
      "return_type": "List<PetType>",
      "parameters": [],
      "membership_type": "private"
    }
  ]
}